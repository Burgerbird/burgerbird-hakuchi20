const width=window.innerWidth;
const height=window.innerHeight;
const coinPosAux=[[[300,355],[340,355],[700,345]],[[300,225],[340,255],[1000,200],[960,200],[1040,200],[1550,200]],[[326,145],[366,178],[1350,240],[1390,240],[1430,240],[2440,120],[2640,120],[3370,320]],[[350,160],[614,12],[1214,109],[1309,172],[1444,107],[1581,171],[1679,100],[1779,172],[2559,427]],[[915,360],[1115,360],[1995,140],[2025,140],[2055,140],[2330,200],[2525,200]],[[527,355],[660,229],[1014,51],[1638,44],[1894,44],[2397,243],[2807,43]],[[237,347],[354,203],[573,40],[1205,314],[1483,331],[1641,326],[1850,301],[2611,294]],[[156,83],[327,146],[436,219],[685,210],[958,85],[1357,151],[1844,293],[2212,235],[2627,228],[2824,228]],[[692,308],[895,308],[1088,908],[1285,308],[1492,308],[1691,308],[1888,308],[2085,308],[2287,308]],[[246,343],[366,195],[807,148],[978,306],[1326,387],[1578,523],[1725,439],[1960,330],[2337,411],[2553,573],[2919,481]],[[333,462],[772,462],[1051,412],[1600,427],[2226,106],[2349,195],[2455,300],[2673,364],[3019,361],[3211,357],[3429,357],[3646,480]],[[284,54],[692,54],[920,42],[1174,122],[1342,244],[1756,178],[2010,278],[2322,416],[2570,150],[2960,114],[3400,114]],[[181,370],[318,521],[536,521],[717,337],[1061,242],[1276,334],[1490,434],[1617,364],[1975,250],[2396,448],[2875,392],[3100,267],[3665,226]],[[1122,412],[1530,402],[1915,402],[2140,181],[2560,181],[2779,351],[3105,471],[463,483],[3594,487]],[[220,457],[688,450],[930,444],[1285,459],[1776,448],[2142,444],[2224,403],[2431,163],[2727,163],[2985,387],[3315,385],[3678,381]],[[570,440],[600,440],[630,440],[1455,420],[1645,420],[2325,550],[3400,430],[3600,430]],[[590,425],[790,425],[1985,105],[2015,105],[2045,105],[3360,225],[3390,225]],[[1050,230],[1080,230],[1110,230],[1590,560],[1790,560],[2970,189],[3000,189],[3030,189],[3485,485],[3684,485]],[[595,345],[800,345],[1280,250],[1310,250],[1935,495],[3000,366],[3200,366]],[[1056,237],[1870,540],[1910,540],[1950,540],[2570,430],[2600,430],[2630,430]],[[1075,522],[1110,522],[1920,450],[2130,450],[3640,260],[3680,260],[3720,260]]]
const endYPosAux=[335,190,373,85,170,45,300,270,25,425,425,120,330,485,375,380,300,430,550,432,300];
const playerPosAux=[[100,360],[100,150],[100,40],[100,340],[100,50],[100,70],[100,300],[100,100],[100,300],[100,350],[100,350],[100,50],[100,300],[100,250],[100,400],[100,250],[100,250],[100,450],[100,300],[100,175],[100,200]];

export default class MainMenu extends Phaser.Scene {
    constructor(){
        super({key: 'MainMenu'});
    }
    create(){
        this.levelUnlocked = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
        this.buttons = [];
        this.texts = [];
        this.containers = [];
        this.levels();

        for(let i=0;i<21;i++){
            this.buttons.push(this.add.image(0,0,'button').setScale(0.5));
        }
        for(let i=0;i<21;i++){
            let x =i+1;
            x = x.toString();
            let str = "Level "+x;
            this.texts.push(this.add.text(-20, -10, str,{font:" Times"}));
        }

        let heightEach,ogY,ogX,widthEach;

        if(height>width){
            heightEach = height/8;
            ogY = 20;

            widthEach = width/6;
            ogX= widthEach;

        }
        else {
            heightEach = height / 8;
            ogY = 20;

            widthEach = width / 4;
            ogX = widthEach;
        }
        for(let i=1;i<=21;i++){
            let key="map"+i.toString();
            let c=this.add.container(ogX,ogY, [this.buttons[i-1], this.texts[i-1]])
                .setSize(95,25)
                .on('pointerup',() => {
                    let map =
                        this.scene.start("Game", {map: key,coinPos:coinPosAux[i-1],playerPos:playerPosAux[i-1],endY: endYPosAux[i-1], tiles:["Tiles","Tiles2"],level:i.toString()});});
            this.containers.push(c);
            if(ogY+50>height){
                ogY=20;
                ogX+=widthEach;
            }
            else{
                ogY+=heightEach;
            }
        }


        for(let i=0;i<21;i++){
            if(this.levelUnlocked[i]==1){
                this.containers[i].setInteractive({useHandCursor:true}, Phaser.Geom.Rectangle.Contains);
            }
        }


    }

    levels() {
        let x = localStorage.getItem("levels");
        if (x) {
            x = parseInt(x);
            for (let i = 0; i <= x; i++) {
                this.levelUnlocked[i] = 1;
            }
        } 
    }
}